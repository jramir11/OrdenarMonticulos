
function intercambio(padre,hijo,element) {  
    //let temp=[];
    temp = element[hijo];
    element[hijo] = element[padre];
    element[padre] = temp;
}
function maxHeapify (idxPadre, idxHijo,element) {
    let parentIndex = idxPadre;
    let childIndex = idxPadre * 2 + 1;   //obtener indice hijo a partir del padre

    if (childIndex > idxHijo)
        return;
    
    if(childIndex + 1 <= idxHijo && element[childIndex] < element[childIndex + 1])
        childIndex++ ;
    
    if(element[parentIndex] > element[childIndex]){
        intercambio(parentIndex, childIndex,element);
        maxHeapify(childIndex, idxHijo,element);
    }
}
function heapSort(element) {
    for(let i = Math.floor(element.length / 2) - 1; i >= 0 ; i--)
        maxHeapify(i, element.length -1, element);
    
    // for(var i = element.length - 1; i > 0; i--){
    //     intercambio(0, i,element);
    //     maxHeapify(0, i,element);
    // }
    
    console.log(element);
}
heapSort([3, 8, 10, 11, 9, 20, 14]); // deberia retornar 3,8,9,10,11,14,20 

